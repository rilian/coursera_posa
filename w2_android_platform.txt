Android middleware layer lays on the top of Linux kernel. Linux kernel provides infrastructure mechanisms to manage mobile device resources, as well with specific aim to minimize the power consumption. Beside it, kernel has Android-specific enchancements: Binder (optimized interprocess communications), device shared memory management, alarm, etc.

On top of kernel lays hardware (and kernel) abstraction layer. User space C/C++ library used to define Android device interface for drivers. HAL is needed to decouple Android platform logic from hardware interface, and Android frameworks from Linux kernel.

Native C/C++ libraries made in this way because of specific Android device purposes. Surface manager provides UI dispay, Media framework provides support for audio/video streaming, FreeType renders fonts, Webkit engine for browser, OpenGL ES, SGL used to render graphics, SQLite is lightweight file-based database, SSL for secure networking. This selection specifies the root of Android specific features.

On top of that goes runtime on Dalvik VM, which has less overhead over standard Java VM. Apps typically run in independent processes in their own instance of VM. Android ships with limited number of Java core libraries, to increase performance and due to limited memory and CPU on devices.

Next layer is application frameworks, which are also specific to the mobile platform. Window manager has specific to display one top-level window and run all others in background. Custom views (lists, grids, buttons, other UI things. Content provider framework which allows multiple applications share the data (for example photos). Activity manager to control the app lifecycle and common navigation stack. Package manager. Telephony manager. Resource manager, which provides localization and UI graphics; Location manager to provide access to geo location hardware module; Notification manager to notify on events happened in different running processes, even if they happen in background.

Key types of Android components are Activity, which represents a single screen wuth UI; Service, which runs in background to perform long-running operations or to access remote resources; Content Provider, which manages shared app data via Content Resolver interface; Broadcast Receiver, which responds to system-wide broadcast announcements of events occured withhin different processees and apps.

To summarize, Android defines a layered software stack for mobile device, with scpecific device purposes (long battery life) and features. Applications are developed using framework components that Android can instantiate and run when needed. Also, most parts of Android are available as open source, and this usually allows to build more quality components and have less bugs.

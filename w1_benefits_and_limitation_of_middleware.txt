Modern software relies not only on the programming code of business logic itself, but also on various frameworks, based on programming languages, that connect the code with operating system and network. Middleware provides services to software applications, allowing each part of application do it's high-level or low-level work.

The key benefit of using middleware is to separate responsibility of application "layers". Application should not care how to save data on the SSD disk, and the disk controller does not care about payment transaction initiated by user. Middleware incapsulates own service and provides common interface to access it. Middleware allows to split the complexity of the whole application to the parts that implement different concerns.

It provides the "portability" feature for developers - if needed, one middleware may be replaced by another, providing similar interfaces, and the software atop of it and on the level below would not require a lot of changes to continue working. But from the other side of the medal, unified middleware, for example database management system, holds a lot of parts that are not used and not required in current developed application. This may bring the performance issues, not only the speed of utilizing CPU cycles, but also deployment, replication and other issues related to support the application stack (aka middleware stack). In this case, it makes sense to choose middleware that has ability to use plug-ins and has modular structure.

Using middleware makes development easier because the middleware usually solve the common problems and implement the pattern of architecture. This speeds up development process but adds additional issue - in modern world software development process is very rapid and new versions of sowtware pop up every day. With the new and deprecated features developers should be careful to keep software up to date and properly configured. Sometimes this may bring sufficient sustainment efforts to keep all the operations work.

At last, splitting one massive application into using middleware and frameworks, helps to keep everything operational by hiring proper developers who are professionals in the given field. A lot of parts may be oursourced and supported by small teams. This may be efficient from the business side of view, cost-effective and allow shipping fast. If the application architecture designed properly with the mind of future expansion, it may be wise to cheaply build the application scaled horizontally, and then attach more host servers, rather than hiring software guru to build custom solution that is extra efficient, but spend ages polishing bugs and testing. Not every software requires high-load from the start, so choosing proper middleware is a key to success.

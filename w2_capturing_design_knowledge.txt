In order to become a master, software developer should understand the software architecture design knowledge. Unlike in mature engineering disciplines, where a lot of resources and best practices available for ages, software engineering is a quite new discipline and the knowledge on building distributed application is in development.

Historically, first software engineers were scientists, engineers and mechanics, and the process of writing software was highly coupled to physically control the hardware (relay and lamp computers).

Nowadays, thanks to commoditisation, the barrier to entry to the software profession is much lower, since a lot of specific high-level frameworks appeared. Historically, these frameworks were developed to solve specific tasks, keeping in mind certain design dimensions (like, configurability, portability, scalability etc). While for experienced software engineer it is obvious, to solve specific task with a specific tool (language, middleware stack), for new developers it is not, since they tend to solve everything with one known language for them.

The global challenge of networked software development is provide scalability and life-proven patterns and best practices of building efficient concurrent software. By now, around 2billion people use the Internet every day so if you write popular application you will face the consequences ;)

Luckily, now software engineering became one of the common professions so we have pletny resources and best practices available. People organise conferences, write own books and promote the best practices as much as possible. A very good example here is Ruby community - with popularity of web development, ease of learning curve of Ruby, and strong test-driven development behaviour and SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) practices, the best practices mature and confirm that patterns of software architecture design really work and bring success.
